
build/waveshaper.elf:     file format elf32-littlearm


Disassembly of section .text:

20017840 <_text_start>:
20017840:	4770      	bx	lr

20017842 <_hook_resume>:
20017842:	4770      	bx	lr
20017844:	4770      	bx	lr

20017846 <_hook_suspend>:
20017846:	4770      	bx	lr
20017848:	4770      	bx	lr

2001784a <_entry>:
2001784a:	4b10      	ldr	r3, [pc, #64]	; (2001788c <_entry+0x42>)
2001784c:	4a10      	ldr	r2, [pc, #64]	; (20017890 <_entry+0x46>)
2001784e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20017852:	4688      	mov	r8, r1
20017854:	4607      	mov	r7, r0
20017856:	2100      	movs	r1, #0
20017858:	4293      	cmp	r3, r2
2001785a:	d002      	beq.n	20017862 <_entry+0x18>
2001785c:	f803 1f01 	strb.w	r1, [r3, #1]!
20017860:	e7fa      	b.n	20017858 <_entry+0xe>
20017862:	4b0c      	ldr	r3, [pc, #48]	; (20017894 <_entry+0x4a>)
20017864:	4c0c      	ldr	r4, [pc, #48]	; (20017898 <_entry+0x4e>)
20017866:	1ae4      	subs	r4, r4, r3
20017868:	10a4      	asrs	r4, r4, #2
2001786a:	2500      	movs	r5, #0
2001786c:	461e      	mov	r6, r3
2001786e:	42a5      	cmp	r5, r4
20017870:	d005      	beq.n	2001787e <_entry+0x34>
20017872:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
20017876:	b103      	cbz	r3, 2001787a <_entry+0x30>
20017878:	4798      	blx	r3
2001787a:	3501      	adds	r5, #1
2001787c:	e7f7      	b.n	2001786e <_entry+0x24>
2001787e:	4641      	mov	r1, r8
20017880:	4638      	mov	r0, r7
20017882:	f000 f80b 	bl	2001789c <_hook_init>
20017886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2001788a:	bf00      	nop
2001788c:	2001792f 	.word	0x2001792f
20017890:	2001792f 	.word	0x2001792f
20017894:	20017840 	.word	0x20017840
20017898:	20017840 	.word	0x20017840

2001789c <_hook_init>:
    return 1.5f * in - 0.5f * in *in * in;
}

void MODFX_INIT(uint32_t platform, uint32_t api)
{
    distamt = 1.f;
2001789c:	4b02      	ldr	r3, [pc, #8]	; (200178a8 <_hook_init+0xc>)
2001789e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
200178a2:	601a      	str	r2, [r3, #0]
200178a4:	4770      	bx	lr
200178a6:	bf00      	nop
200178a8:	20017928 	.word	0x20017928

200178ac <_hook_process>:

// For double frames (AKA samples cause each frame = sample pair)
 for (int i=0;i<frames*2;i++)
  {
    // Waveshaping algorithm
    base_main = *(xn++) * input_gain * ((distamt * 10.0f) + 1.f);
200178ac:	4b14      	ldr	r3, [pc, #80]	; (20017900 <_hook_process+0x54>)
200178ae:	ed93 4a01 	vldr	s8, [r3, #4]
200178b2:	edd3 4a00 	vldr	s9, [r3]
200178b6:	9b00      	ldr	r3, [sp, #0]
200178b8:	eeb2 5a04 	vmov.f32	s10, #36	; 0x41200000  10.0
200178bc:	005a      	lsls	r2, r3, #1
200178be:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 
 float base_main;
 const float *main_yn_e = yn + 2 * frames;

// For double frames (AKA samples cause each frame = sample pair)
 for (int i=0;i<frames*2;i++)
200178c2:	2300      	movs	r3, #0
  {
    // Waveshaping algorithm
    base_main = *(xn++) * input_gain * ((distamt * 10.0f) + 1.f);
    *yn++ = waveshape(base_main);
200178c4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
200178c8:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 
 float base_main;
 const float *main_yn_e = yn + 2 * frames;

// For double frames (AKA samples cause each frame = sample pair)
 for (int i=0;i<frames*2;i++)
200178cc:	4293      	cmp	r3, r2
200178ce:	d015      	beq.n	200178fc <_hook_process+0x50>
  {
    // Waveshaping algorithm
    base_main = *(xn++) * input_gain * ((distamt * 10.0f) + 1.f);
200178d0:	eeb0 7a65 	vmov.f32	s14, s11
200178d4:	ecf0 7a01 	vldmia	r0!, {s15}
200178d8:	eea4 7a85 	vfma.f32	s14, s9, s10
 
 float base_main;
 const float *main_yn_e = yn + 2 * frames;

// For double frames (AKA samples cause each frame = sample pair)
 for (int i=0;i<frames*2;i++)
200178dc:	3301      	adds	r3, #1
  {
    // Waveshaping algorithm
    base_main = *(xn++) * input_gain * ((distamt * 10.0f) + 1.f);
200178de:	ee64 7a27 	vmul.f32	s15, s8, s15
200178e2:	ee67 7a87 	vmul.f32	s15, s15, s14
    *yn++ = waveshape(base_main);
200178e6:	ee27 7aa7 	vmul.f32	s14, s15, s15
200178ea:	ee27 7a27 	vmul.f32	s14, s14, s15
200178ee:	ee26 7a47 	vnmul.f32	s14, s12, s14
200178f2:	eea7 7aa6 	vfma.f32	s14, s15, s13
200178f6:	eca1 7a01 	vstmia	r1!, {s14}
 
 float base_main;
 const float *main_yn_e = yn + 2 * frames;

// For double frames (AKA samples cause each frame = sample pair)
 for (int i=0;i<frames*2;i++)
200178fa:	e7e7      	b.n	200178cc <_hook_process+0x20>
200178fc:	4770      	bx	lr
200178fe:	bf00      	nop
20017900:	20017928 	.word	0x20017928

20017904 <_hook_param>:
}

void MODFX_PARAM(uint8_t index, int32_t value)
{
  //Convert fixed-point q31 format to float
  const float valf = q31_to_f32(value);
20017904:	ee07 1a90 	vmov	s15, r1
20017908:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
  switch (index)
2001790c:	b110      	cbz	r0, 20017914 <_hook_param+0x10>
2001790e:	2801      	cmp	r0, #1
20017910:	d004      	beq.n	2001791c <_hook_param+0x18>
20017912:	4770      	bx	lr
  {
    case 0:
      distamt = valf;
20017914:	4b03      	ldr	r3, [pc, #12]	; (20017924 <_hook_param+0x20>)
20017916:	edc3 7a00 	vstr	s15, [r3]
    break;
2001791a:	4770      	bx	lr
  //timeAssign a value to rate when turning the knob
  case 1:
      input_gain = valf;
2001791c:	4b01      	ldr	r3, [pc, #4]	; (20017924 <_hook_param+0x20>)
2001791e:	edc3 7a01 	vstr	s15, [r3, #4]
20017922:	4770      	bx	lr
20017924:	20017928 	.word	0x20017928
