
build/waveshaper.elf:     file format elf32-littlearm


Disassembly of section .text:

20017840 <_text_start>:
20017840:	4770      	bx	lr

20017842 <_hook_resume>:
20017842:	4770      	bx	lr
20017844:	4770      	bx	lr

20017846 <_hook_suspend>:
20017846:	4770      	bx	lr
20017848:	4770      	bx	lr

2001784a <_entry>:
2001784a:	4b10      	ldr	r3, [pc, #64]	; (2001788c <_entry+0x42>)
2001784c:	4a10      	ldr	r2, [pc, #64]	; (20017890 <_entry+0x46>)
2001784e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20017852:	4688      	mov	r8, r1
20017854:	4607      	mov	r7, r0
20017856:	2100      	movs	r1, #0
20017858:	4293      	cmp	r3, r2
2001785a:	d002      	beq.n	20017862 <_entry+0x18>
2001785c:	f803 1f01 	strb.w	r1, [r3, #1]!
20017860:	e7fa      	b.n	20017858 <_entry+0xe>
20017862:	4b0c      	ldr	r3, [pc, #48]	; (20017894 <_entry+0x4a>)
20017864:	4c0c      	ldr	r4, [pc, #48]	; (20017898 <_entry+0x4e>)
20017866:	1ae4      	subs	r4, r4, r3
20017868:	10a4      	asrs	r4, r4, #2
2001786a:	2500      	movs	r5, #0
2001786c:	461e      	mov	r6, r3
2001786e:	42a5      	cmp	r5, r4
20017870:	d005      	beq.n	2001787e <_entry+0x34>
20017872:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
20017876:	b103      	cbz	r3, 2001787a <_entry+0x30>
20017878:	4798      	blx	r3
2001787a:	3501      	adds	r5, #1
2001787c:	e7f7      	b.n	2001786e <_entry+0x24>
2001787e:	4641      	mov	r1, r8
20017880:	4638      	mov	r0, r7
20017882:	f000 f80b 	bl	2001789c <_hook_init>
20017886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2001788a:	bf00      	nop
2001788c:	2001793f 	.word	0x2001793f
20017890:	2001793f 	.word	0x2001793f
20017894:	20017840 	.word	0x20017840
20017898:	20017840 	.word	0x20017840

2001789c <_hook_init>:
    return 1.5f * in - 0.5f * in *in * in;
}

// Initializing Platform //
void MODFX_INIT(uint32_t platform, uint32_t api)
{
2001789c:	4770      	bx	lr

2001789e <_hook_process>:
// Main DSP Process Block //
// Sub values to be ignored, only used for prologue
void MODFX_PROCESS(const float *xn, float *yn,
                   const float *sub_xn, float *sub_yn,
                   uint32_t frames)
{
2001789e:	b510      	push	{r4, lr}
200178a0:	9b02      	ldr	r3, [sp, #8]
  // Effect processing loop //
  // For double frames (AKA samples cause each frame = sample pair)
  for (int i=0;i<frames*2;i++)
  {
    float xn_cur = *xn++;
    wet_signal = (wet * ((xn_cur * ((distamt * 10.0f) + 1.f)) - xn_cur));
200178a2:	4a1b      	ldr	r2, [pc, #108]	; (20017910 <_hook_process+0x72>)
    base_main = xn_cur + wet_signal;
    // Waveshaping algorithm // 
    // DRY + WET
    if (counter < frames / 2) {
200178a4:	085c      	lsrs	r4, r3, #1
  // Effect processing loop //
  // For double frames (AKA samples cause each frame = sample pair)
  for (int i=0;i<frames*2;i++)
  {
    float xn_cur = *xn++;
    wet_signal = (wet * ((xn_cur * ((distamt * 10.0f) + 1.f)) - xn_cur));
200178a6:	edd2 6a00 	vldr	s13, [r2]
200178aa:	ed92 6a01 	vldr	s12, [r2, #4]
200178ae:	3104      	adds	r1, #4
200178b0:	005a      	lsls	r2, r3, #1
    base_main = xn_cur + wet_signal;
200178b2:	eef2 5a04 	vmov.f32	s11, #36	; 0x41200000  10.0
                   const float *sub_xn, float *sub_yn,
                   uint32_t frames)
{
  float base_main;
  float wet_signal;
  int counter = 0;
200178b6:	2300      	movs	r3, #0
  // For double frames (AKA samples cause each frame = sample pair)
  for (int i=0;i<frames*2;i++)
  {
    float xn_cur = *xn++;
    wet_signal = (wet * ((xn_cur * ((distamt * 10.0f) + 1.f)) - xn_cur));
    base_main = xn_cur + wet_signal;
200178b8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    // Waveshaping algorithm // 
    // DRY + WET
    if (counter < frames / 2) {


      *yn++ = waveshape(base_main);
200178bc:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
200178c0:	eeb7 4a08 	vmov.f32	s8, #120	; 0x3fc00000  1.5
  float base_main;
  float wet_signal;
  int counter = 0;
  // Effect processing loop //
  // For double frames (AKA samples cause each frame = sample pair)
  for (int i=0;i<frames*2;i++)
200178c4:	4293      	cmp	r3, r2
200178c6:	d021      	beq.n	2001790c <_hook_process+0x6e>
  {
    float xn_cur = *xn++;
    wet_signal = (wet * ((xn_cur * ((distamt * 10.0f) + 1.f)) - xn_cur));
    base_main = xn_cur + wet_signal;
200178c8:	eeb0 7a45 	vmov.f32	s14, s10
200178cc:	eea6 7aa5 	vfma.f32	s14, s13, s11
    // Waveshaping algorithm // 
    // DRY + WET
    if (counter < frames / 2) {
200178d0:	429c      	cmp	r4, r3
200178d2:	f101 0104 	add.w	r1, r1, #4
  int counter = 0;
  // Effect processing loop //
  // For double frames (AKA samples cause each frame = sample pair)
  for (int i=0;i<frames*2;i++)
  {
    float xn_cur = *xn++;
200178d6:	ecf0 7a01 	vldmia	r0!, {s15}
    wet_signal = (wet * ((xn_cur * ((distamt * 10.0f) + 1.f)) - xn_cur));
    base_main = xn_cur + wet_signal;
200178da:	eef0 3a67 	vmov.f32	s7, s15
200178de:	eed7 3a87 	vfnms.f32	s7, s15, s14
      *yn++ = waveshape(base_main);
    }
    else{
      *yn++ = base_main;
    }
    counter++;
200178e2:	f103 0301 	add.w	r3, r3, #1
  // For double frames (AKA samples cause each frame = sample pair)
  for (int i=0;i<frames*2;i++)
  {
    float xn_cur = *xn++;
    wet_signal = (wet * ((xn_cur * ((distamt * 10.0f) + 1.f)) - xn_cur));
    base_main = xn_cur + wet_signal;
200178e6:	eee3 7a86 	vfma.f32	s15, s7, s12
200178ea:	eeb0 7a63 	vmov.f32	s14, s7
    // Waveshaping algorithm // 
    // DRY + WET
    if (counter < frames / 2) {


      *yn++ = waveshape(base_main);
200178ee:	bf81      	itttt	hi
200178f0:	ee27 7aa7 	vmulhi.f32	s14, s15, s15
200178f4:	ee27 7a27 	vmulhi.f32	s14, s14, s15
200178f8:	ee24 7ac7 	vnmulhi.f32	s14, s9, s14
200178fc:	eea7 7a84 	vfmahi.f32	s14, s15, s8
20017900:	bf88      	it	hi
20017902:	eef0 7a47 	vmovhi.f32	s15, s14
    }
    else{
      *yn++ = base_main;
20017906:	ed41 7a02 	vstr	s15, [r1, #-8]
  float base_main;
  float wet_signal;
  int counter = 0;
  // Effect processing loop //
  // For double frames (AKA samples cause each frame = sample pair)
  for (int i=0;i<frames*2;i++)
2001790a:	e7db      	b.n	200178c4 <_hook_process+0x26>
2001790c:	bd10      	pop	{r4, pc}
2001790e:	bf00      	nop
20017910:	20017938 	.word	0x20017938

20017914 <_hook_param>:

// Param Controls //
void MODFX_PARAM(uint8_t index, int32_t value)
{
  //Convert fixed-point q31 format to float
  const float valf = q31_to_f32(value);
20017914:	ee07 1a90 	vmov	s15, r1
20017918:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
  switch (index)
2001791c:	b110      	cbz	r0, 20017924 <_hook_param+0x10>
2001791e:	2801      	cmp	r0, #1
20017920:	d004      	beq.n	2001792c <_hook_param+0x18>
20017922:	4770      	bx	lr
  {
    case 0:
      distamt = valf;
20017924:	4b03      	ldr	r3, [pc, #12]	; (20017934 <_hook_param+0x20>)
20017926:	edc3 7a00 	vstr	s15, [r3]
    break;
2001792a:	4770      	bx	lr
  case 1:
      wet = valf;
2001792c:	4b01      	ldr	r3, [pc, #4]	; (20017934 <_hook_param+0x20>)
2001792e:	edc3 7a01 	vstr	s15, [r3, #4]
20017932:	4770      	bx	lr
20017934:	20017938 	.word	0x20017938
